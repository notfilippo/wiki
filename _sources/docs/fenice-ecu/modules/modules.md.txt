# Modules


## UART
Several serial communication interfaces are used:

| Interface | TX Pin | RX Pin | Baud Rate | Description         |
|-----------|--------|--------|-----------|---------------------|
| UART4     | PA12   | PA13   | 115200    | Debugging messages  |
| ...       |        |        |           | Front Right Encoder |
| ...       |        |        |           | Front Left Encoder  |
| ...       |        |        |           | Steering Encoder    |

For more details on the encoders, see [the dedicated section below](#encoders).


-------------------------------------------------------------------------------


## Timers
List of STM timers employed:

| Timer | Pin | Description        |
|-------|-----|--------------------|
| TIM10 | PB8 | Buzzer PWM output  |


-------------------------------------------------------------------------------


## Buzzer
As required by the rulebook, the ECU must beep a buzzer for at least (?) ...

The buzzer is driven by a MOSFET operated via the PWM output generated by the TIM10 timer on pin PB8, and powered by the 12V line.


-------------------------------------------------------------------------------


## CAN
Fenice's internal networks operate on two CAN buses.

###### Networks
| Network   | Interface | CAN_TX Pin | CAN_RX Pin |
|-----------|-----------|------------|------------|
| Primary   | CAN1      | PD1        | PD0        |
| Secondary | CAN3      | PB4        | PA8        |

###### Bit Timing Parameters
- APB1 Peripheral Clock (PCLK1): **54 MHz**
- Prescaler: **3**
    - *Time Quantum is therefore 55.555 ns*
- Time Quanta in Bit Segment 1: **12**
- Time Quanta in Bit Segment 2: **5**
    - *Time for one bit is therefore 999.99 ns*
    - *Baud rate is therefore 1000000 bps (**1 Mbit/s**)*
- ReSynchronization Jump Width: **1**

###### Messages
For the list and definition of all CAN messages please refer to the [can-cicd documentation](#../../can-cicd).


-------------------------------------------------------------------------------


## SPI
The SPI interface is used to communicate with the Traction Control Unit and exchange information on vehicle state and motor torque. Since the TCU runs on a Raspberry Pi which is, by design, only capable of operating as a Master node, the ECU acts as the Slave node.

| Interface | CLK Pin | ... |
|-----------|---------|-----|
| ...       |         |     |

For more information on how and what information is exchanged, please refer to the [Traction Control](#traction-control) section below.


-------------------------------------------------------------------------------


## IMU
This module records the acceleration data coming from the Inertial Measurement Unit (IMU) sensor over the CAN network.

Namely, it receives:
- Linear acceleration on the three directions
- Gyroscopic acceleration on the three axes

###### Sensor Configuration
In order to work properly, the sensor needs to be configured with the following parameters:
- Sampling frequency: ?
- ...


-------------------------------------------------------------------------------


## IRTS
Four Infra-Red Temperature Sensors (IRTSs) are pointed toward the tires and measure their temperature gradient using 8 (?) channels each (...)


-------------------------------------------------------------------------------


## Inverters
The Inverters and the ECU communicate over the CAN network and exchange the following information:
- The ECU periodically (at which freq. ?) sends two torque values to be applied to the motors, one for the left side and one for the right side
- The inverters periodically (every 100ms) report the contents of their status register (more details below)
- The inverters periodically (every 100ms) report the output voltage at which they are driving the motors

###### Status Register Contents
- ...

###### Current-Torque Curve and Power Limiting
Since, for a given current, power absorption of the motors is proportional to their rotational speed, and given that inverters are controlled in torque/current mode, care must be taken not to request more than the allowed limit of 80 KWh.

More details on the matter are available in this report:
{pdfembed}`src:Powertrain_Transmission_Optimal_Parameters.pdf, height:400, width:100%, align:middle`

Essentially, requesting the maximum available current of 200A when the angular velocity is above 4000 RPM causes the power to exceed the allowed limit. To overcome this issue, the following equation must then be followed to obtain the correct torque limit at each rotational speed:

$C_{mot\_max} =
    \begin{cases}
      C_{max} & \text{if $\omega_{mot} < \omega_{limit}$} \\
      \frac{358098.6}{\omega_{mot}} & \text{if $\omega_{mot} \geq \omega_{limit}$}$


-------------------------------------------------------------------------------


## PCU
This module controls all communication (via CAN-Bus) between the ECU and the Pedal Control Unit (PCU). More specifically:
- ADC brake and accelerator values are read and scaled from 0 to 100
- Errors and Warnings are checked (e.g. implausibility)
- Calibration values are read/written from/to the EEPROM and sent/received


-------------------------------------------------------------------------------


## Tractive System
The TC code handles the generation and delivery of messages concerning the status of the BMS-HV (PRECHARGE, TS-ON, TS-OFF, ...).


-------------------------------------------------------------------------------


## Traction Control
Since the actual software for controlling the traction of the vehicle runs on a separate device (for reliability purposes), the ECU and the Traction Control Unit (TCU) need to constantly exchange a number of values.

| Parameter Name | Direction  | Description |
|----------------|------------|-------------|
| Brake          | ECU -> TCU | How much the brake pedal is pressed |
| ...            |            |             |

Further technical details on how this data is exchanged over SPI can be found at the [TCU Protocol](#?) page.


-------------------------------------------------------------------------------


## Encoders
...
